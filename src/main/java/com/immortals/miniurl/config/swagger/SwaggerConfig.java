package com.immortals.miniurl.config.swagger;import io.swagger.v3.oas.models.OpenAPI;import io.swagger.v3.oas.models.info.Contact;import io.swagger.v3.oas.models.info.Info;import io.swagger.v3.oas.models.info.License;import io.swagger.v3.oas.models.security.SecurityRequirement;import io.swagger.v3.oas.models.servers.Server;import org.springdoc.core.models.GroupedOpenApi;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.stream.Collectors;@Configuration@ConditionalOnProperty(name = "swagger.enabled", havingValue = "true")public class SwaggerConfig {    private final SwaggerProperties properties;    public SwaggerConfig(SwaggerProperties properties) {        this.properties = properties;    }    public static Contact parseContact(String contactString) {        if (contactString == null || contactString.trim()                .isEmpty()) {            throw new IllegalArgumentException("Contact string cannot be null or empty");        }        try {            // "Name - email (url)"            String[] parts = contactString.split(" - ");            String name = parts[0].trim();            String[] emailAndUrl = parts[1].split(" \\(");            String email = emailAndUrl[0].trim();            String url = emailAndUrl[1].replace(")", "")                    .trim();            return new Contact().name(name)                    .email(email)                    .url(url);        } catch (Exception e) {            throw new IllegalArgumentException("Invalid contact format. Expected: 'Name - email (url)'", e);        }    }    @Bean    public OpenAPI openAPI() {        return new OpenAPI().info(apiInfo())                .servers(properties.getServers()                        .stream()                        .map(s -> new Server().url(s.getUrl())                                .description(s.getDescription()))                        .collect(Collectors.toList()))                .addSecurityItem(new SecurityRequirement().addList("bearerAuth"));    }    private Info apiInfo() {        Contact contact = parseContact(properties.getContact());        return new Info().title(properties.getTitle())                .version(properties.getVersion())                .description(properties.getDescription())                .termsOfService(properties.getTermsOfService())                .contact(contact.name(contact.getName())                        .url(contact.getUrl())                        .email(contact.getEmail()))                .license(new License().name(properties.getLicense()                                .getName())                        .url(properties.getLicense()                                .getUrl()));    }    @Bean    public GroupedOpenApi publicApi() {        return GroupedOpenApi.builder()                .group("url-shortener")                .pathsToMatch("/api/shorten/**")                .build();    }}